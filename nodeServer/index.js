// node server which will handle Socket.io connections
// const io = require('socket.io')(8000) // this 8000 is the port we have assigned to the socket
// Socket.io is an instance of http
// socket.io jo server run kia hai wo listen karega incoming events ko
// console.log('Socket.io server started on port 8000');


// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// const io = require('socket.io')(8000)
    // codewithharry asked to put this line in the code, but this was not working.
    // upon seasrching, console was giving a CORS error (Cross-Origin Resource Sharing)
    // apparantly, we are hosting the code on 121.0.0.1/5500 but requesting localhost
    // although localhost and 127.0.0.1 technically point to the same location, the browser sees them as different origins, leading to the CORS error
    // To fix this issue for your Socket.io server, you need to allow CORS.
    // Socket.io alone doesn't provide an easy way to handle CORS headers hence we need to use Express for this.
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// THE FOLLOWING CODE HAS BEEN GENERATED BY CHATGPT TO REMOVE THE CORS ERROR WE WERE FACING EARLIER
const express = require('express');
const cors = require('cors');
const app = express();
const server = require('http').createServer(app);

app.use(cors()); // Use CORS middleware

const io = require('socket.io')(server, {
    cors: {
        origin: "*",  // Allow any origin to access (not recommended for production)
        // methods: ["GET", "POST"]
    }
});

server.listen(8000, () => {
    console.log('Socket.io server started on port 8000');
});
// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


const users={};
io.on('connection', socket => {   // saaare connections listen karega
    //jaise hi connection aaye ek arrow function ke run krdo
    // io.on is a socket.io instance, it will listen to many socket connections
    socket.on('new-user-joined', user_name=>{ // ek particular connection ke saath ky ahoga wo determine krega
        //new-user-joined ek custom event jisko listen kr rhe and emit krenge baadme 
        console.log("new user",user_name);
        users[socket.id] = user_name; 
        socket.broadcast.emit('user-joined',user_name);
        // jis insaan ne join kiya hai uske chhod ke sabko event emit krdeta hai
    });

    // form submit hone pe ham logo ko frontend se ek send event bhejna hai server pe joki ye neeche wala code recieve krega
    // jab send event recieve hoga, to wo sender ke alawa baaki saare users ko recieve naam ka event broadcast krdega and sabke paas msg aajayega 
    // jisko hamne clientInformation.js me handle kar rkha hai
    // form me ek event listener laga denge which will determine what will happen when someone submits the form
    socket.on('send', message=> {
        socket.broadcast.emit('recieve', {message: message, user_name: users[socket.id]})
        // recieve ek event hai jo emit ho rha hai aur isko hamko client.js me pakadna hai
    });

    // whenever a user leaves the socket server it leaves a disconnect event
    socket.on('disconnect', message=> {
        socket.broadcast.emit('left', users[socket.id])
        delete users[socket.id]; // jo user leave krke gaya uski id bhi delete kardo
        // socket.id is a unique id for every socket connection, from which we can indetify.. names to duplicate ho sakte hai, but it can't be
        // left ek event hai jo emit ho rha hai aur isko hamko client.js me pakadna hai
    });

    socket.on('error', (error) => {
        console.log('Socket Error:', error);
     });
     
})


